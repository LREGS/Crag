// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: query.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createClimb = `-- name: CreateClimb :one
INSERT INTO climb (
    Name, Grade, CragID)
VALUES($1, $2, $3)
RETURNING id, name, grade, cragid
`

type CreateClimbParams struct {
	Name   pgtype.Text
	Grade  pgtype.Text
	Cragid pgtype.Int4
}

// columns: Id, Name, Grade, CragID
func (q *Queries) CreateClimb(ctx context.Context, arg CreateClimbParams) (Climb, error) {
	row := q.db.QueryRow(ctx, createClimb, arg.Name, arg.Grade, arg.Cragid)
	var i Climb
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Grade,
		&i.Cragid,
	)
	return i, err
}

const deleteClimb = `-- name: DeleteClimb :exec
DELETE FROM climb WHERE id = $1
`

func (q *Queries) DeleteClimb(ctx context.Context, id int32) error {
	_, err := q.db.Exec(ctx, deleteClimb, id)
	return err
}

const getAllClimbs = `-- name: GetAllClimbs :many
SELECT id, name, grade, cragid FROM climb ORDER BY name
`

func (q *Queries) GetAllClimbs(ctx context.Context) ([]Climb, error) {
	rows, err := q.db.Query(ctx, getAllClimbs)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Climb
	for rows.Next() {
		var i Climb
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Grade,
			&i.Cragid,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getClimb = `-- name: GetClimb :one
SELECT id, name, grade, cragid FROM climb WHERE Id = $1
`

func (q *Queries) GetClimb(ctx context.Context, id int32) (Climb, error) {
	row := q.db.QueryRow(ctx, getClimb, id)
	var i Climb
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Grade,
		&i.Cragid,
	)
	return i, err
}

const updateClimb = `-- name: UpdateClimb :exec
UPDATE climb set Name = $1, Grade = $2, CragID = $3 WHERE Id = $4
`

type UpdateClimbParams struct {
	Name   pgtype.Text
	Grade  pgtype.Text
	Cragid pgtype.Int4
	ID     int32
}

func (q *Queries) UpdateClimb(ctx context.Context, arg UpdateClimbParams) error {
	_, err := q.db.Exec(ctx, updateClimb,
		arg.Name,
		arg.Grade,
		arg.Cragid,
		arg.ID,
	)
	return err
}

const getClimbsByCrag = `-- name: getClimbsByCrag :many
SELECT id, name, grade, cragid FROM climb WHERE CragID = $1
`

func (q *Queries) getClimbsByCrag(ctx context.Context, cragid pgtype.Int4) ([]Climb, error) {
	rows, err := q.db.Query(ctx, getClimbsByCrag, cragid)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Climb
	for rows.Next() {
		var i Climb
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Grade,
			&i.Cragid,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
